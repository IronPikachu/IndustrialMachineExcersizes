@inject StateService state

<div class="border bg-light">
    <h3>Device List</h3>

    @* <button @onclick="@(() => MessageFromChild.InvokeAsync("Hello from DeviceList.razor!"))">Klicka på mig, tack</button>*@

    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th scope="col">
                    Name
                </th>
                <th scope="col">
                    Device ID
                </th>
                <th scope="col">
                    Status
                </th>
                <th scope="col">
                    Latest recieved data
                </th>
                <th scope="col">
                    Send data
                </th>
                <th scope="col">
                    Misc
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in Devices.OrderBy(d => d.Name))
            {
                <tr>
                    <td>
                        <div>
                            @device.Name
                        </div>
                    </td>
                    <td>
                        <div class="alert alert-info">
                            @device.Id
                        </div>
                    </td>
                    <td>
                        @if (device.Status)
                        {
                            <div class="alert alert-success" role="alert" @onclick="() => OnToggleStatus(device)">Online</div>
                        }
                        else
                        {
                            <div class="alert alert-danger" role="alert" @onclick="() => OnToggleStatus(device)">Offline</div>
                        }
                    </td>
                    <td>
                        <div>
                            @System.Text.Encoding.ASCII.GetString(device.Data)
                            <div>
                                <button class="btn btn-warning" @onclick="() => UpdateData(device)">
                                    <span class="oi oi-hard-drive"></span>
                                    Get Latest Data
                                </button>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div>
                            <input type="text" @bind="device.SendData" />
                            @if (device.Status)
                            {
                                <button class="btn btn-warning" @onclick="() => SendData(device)">
                                    <span class="oi oi-phone"></span>
                                    Send Data
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-warning disabled" @onclick="() => SendData(device)">
                                    <span class="oi oi-pulse"></span>
                                    Send Data
                                </button>
                            }
                        </div>
                    </td>
                    <td>
                        <div>
                            <NavLink  class="btn btn-primary" href="@($"details/{device.Id}")" @onclick="() => SetTitle(device)">
                                <span class="oi oi-magnifying-glas"></span>
                                Details
                            </NavLink>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    [Parameter]
    public List<Device> Devices { get; set; } = new List<Device>();

    [Parameter]
    public EventCallback<Info> Status { get; set; }

    [CascadingParameter]
    public MainLayout ML { get; set; }

    private async Task SetTitle(Device device)
    {
        await state.SetDevice(device);
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetFromJsonAsync<List<Device>>($"api/get");

        if (response != null)
        {
            Devices = response;
        }

        await OnStatus();
    }

    async Task SendData(Device device)
    {
        var response = await httpClient.PutAsJsonAsync<Device>($"api/putdata/{device.Id}", device);

        if (response != null)
        {
            state.UpdateDevice(device);
            ML.NotifyStateChange();
        }
    }

    async Task OnToggleStatus(Device device)
    {
        device.Status = !device.Status;

        var response = await httpClient.PutAsJsonAsync<Device>($"api/putstat/{device.Id}", device);

        if (response != null)
        {
            await OnStatus();
        }
        else
        {
            device.Status = !device.Status;
        }
    }

    async Task OnStatus() => await Status.InvokeAsync(new Info()
        {
            OnlineCount = Devices != null ? Devices.Where(d => d.Status).ToList().Count : -1,
            OfflineCount = Devices != null ? Devices.Where(d => !d.Status).ToList().Count : -1
        });

    async Task UpdateData(Device device)
    {
        var response = await httpClient.GetFromJsonAsync<Device>($"api/get/{device.Id}");

        if (response != null)
        {
            Devices.Remove(device);
            Devices.Add(response);
            //device = response;
            //state.UpdateDevice(device);
            StateHasChanged();
        }
    }
}
